package com.slzr.operation.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.slzr.common.annotation.SystemControllerLog;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.slzr.common.controller.BaseController;
import com.slzr.common.utils.DWMQDateUtil;
import com.slzr.common.utils.DWMQDateVO;
import com.slzr.common.utils.DateUtils;
import com.slzr.common.utils.ExcelExportTool;
import com.slzr.common.utils.PageUtils;
import com.slzr.common.utils.Query;
import com.slzr.operation.domain.DailysummaryBaseDO;
import com.slzr.operation.domain.DailysummaryTopupDO;
import com.slzr.operation.service.DailysummaryBaseService;
import com.slzr.set.domain.MerchDo;
import com.slzr.set.service.MerchService;


@Controller
@RequestMapping("/operation/dailySummaryBase")
public class DailysummaryBaseController extends BaseController{
	private String prefix = "operation/dailySummaryBase";
	@Autowired
	private DailysummaryBaseService dailysummaryBaseService;
	
	@Autowired
	private MerchService merchService;
	
	@GetMapping("/list")
	public String list(Model model) {
		
		HashMap<String,Object> params=new HashMap<>();
		List<MerchDo> merchantList= merchantList=merchService.list(params);
		model.addAttribute("merchantList",merchantList);
		
		DWMQDateVO dwmq = null;
		try {
			dwmq = DWMQDateUtil.GetDWMQDateOneVO(DateUtils.format(Calendar.getInstance().getTime(), DateUtils.DATE_PATTERN));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		dwmq.setEndDay(dwmq.getStartDay());
		model.addAttribute("dwmq", dwmq);
		return prefix + "/list";
	}
	
 
	@ResponseBody
	@GetMapping("api/list")
	@RequiresPermissions("operation:dailySummaryBase:list")
	public PageUtils list(@RequestParam Map<String, Object> params) {
		//查询列表数据
        Query query = new Query(params);
		List<DailysummaryBaseDO> list = dailysummaryBaseService.list(query);
		for(DailysummaryBaseDO objdo : list) {
			objdo.setEnterAmount(objdo.getTopupAmount().multiply(new BigDecimal(1-0.001)));
			//objdo.setSummaryDateTimeText(DateUtils.format(objdo.getSummaryDateTime(), DateUtils.DATE_PATTERN));
		}
		int total = dailysummaryBaseService.count(query);
		PageUtils pageUtils = new PageUtils(list, total);
		return pageUtils;
	}
	

 
    @RequestMapping("/expexcel")
    public void expExceluser(ModelMap model,HttpServletRequest request,HttpServletResponse response,@RequestParam Map<String, Object> params){
  	  	String fileName = "充值日结查询.xls";
  	  	
  	  	String[] title = new String[]{"交易日期","商户名称","充值金额","入账金额","充值笔数","退款金额","退款笔数","服务费","日结日期",};
  	  	
  	    List<DailysummaryBaseDO> list = null;
  	    
		try {
			list = dailysummaryBaseService.list(params);
	    	List<Object[]> data = new ArrayList<Object[]>();
	    	for(int i=0; i<list.size();i++){
		        Object[] str = new Object[title.length];
		        
		        //交易日期
		        if(null!=list.get(i).getTxnDate() && !list.get(i).getTxnDate().equals("")){
		        	str[0] = list.get(i).getTxnDate().toString();
		        }else{
		        	str[0] = "";
		        }
		       
		        //商户
		        if(null!=list.get(i).getShortName()&& !list.get(i).getShortName().equals("")){
		        	str[1] = list.get(i).getShortName().toString();
		        }else{
		        	str[1] = "";
		        }
		        //充值金额
		        if(null!=list.get(i).getTopupAmount()){
		        	str[2] = list.get(i).getTopupAmount().toString();
		        }else{
		        	str[2] = "";
		        }
		        //入账金额
		        if(null!=list.get(i).getTopupAmount()){
		        	str[3] = list.get(i).getTopupAmount().multiply(new BigDecimal(1-0.001)).setScale(2,BigDecimal.ROUND_HALF_UP).toString();
		        }else{
		        	str[3] = "";
		        }
		        //充值笔数
		        if(null!=list.get(i).getTopupNum()){
		        	str[4] = list.get(i).getTopupNum().toString();
		        }else{
		        	str[4] = "";
		        }
		        //退款金额
		        if(null!=list.get(i).getRefundAmount()){
		        	str[5] = list.get(i).getRefundAmount().toString();
		        }else{
		        	str[5] = "";
		        }
		        //退款笔数
		        if(null!=list.get(i).getRefundNum()){
		        	str[6] = list.get(i).getRefundNum().toString();
		        }else{
		        	str[6] = "";
		        }
		        //服务费
		        if(null!=list.get(i).getRefundServiceFee()){
		        	str[7] = list.get(i).getRefundServiceFee().toString();
		        }else{
		        	str[7] = "";
		        }
		      		        
		        //日结日期
		        if(null!=list.get(i).getSummaryDateTime()){
		        	str[8] = list.get(i).getSummaryDateTime().toString();
		        }else{
		        	str[8] = "";
		        }
		        data.add(str);
	    	}
	    	String sheetName = "expExcel";
			byte[] b = fileName.getBytes("UTF-8"); 
		    String formatFileName = new String(b,"ISO-8859-1");		      	 
		    response.setContentType("application/ms-excel");
		    response.setHeader("Content-disposition", "attachment;filename="+formatFileName);
		    ExcelExportTool.exportExcel(formatFileName, sheetName, title, data, response);
		 } catch (Exception e) {
			 e.printStackTrace();
		 }finally{
			 list=null;
		 }
  	  	
    }
 
}
