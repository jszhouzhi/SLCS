package com.slzr.operation.controller;

import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.slzr.common.controller.BaseController;
import com.slzr.common.utils.PageUtils;
import com.slzr.common.utils.Query;
import com.slzr.common.utils.R;
import com.slzr.operation.domain.DailysummarySettleDO;
import com.slzr.operation.service.DailysummarySettleService;


@Controller
@RequestMapping("/operation/settle")
public class DailysummarySettleController extends BaseController {
	private String prefix = "operation/settle";
	@Autowired
	private DailysummarySettleService settleservice;
	
	@GetMapping("/list")
	public String list() {
		return prefix + "/list";
	}
	
	@GetMapping("/detail/{id}")
	public String detail(Model model,@PathVariable("id") String id) {
		DailysummarySettleDO obj = settleservice.get(id);
		model.addAttribute("model",obj);
		model.addAttribute("settleMethodText",ConvertToSettleMethodText(obj.getSettleMethod()));
		model.addAttribute("auditStatusText",ConvertToAuditStatusText(obj.getAuditStatus()));
		return prefix + "/detail";
	}
	
	@GetMapping("/check/{id}")
	public String check(Model model,@PathVariable("id") String id) {
		DailysummarySettleDO obj = settleservice.get(id);
		model.addAttribute("model",obj);
		model.addAttribute("transStatusText",ConvertToTransStatusText(obj.getTransferStatus()));
		return prefix + "/check";
	}
	
	@ResponseBody
	@GetMapping("api/list")
	@RequiresPermissions("operation:settle:list")
	public PageUtils list(@RequestParam Map<String, Object> params) {
		//查询列表数据
        Query query = new Query(params);
		List<DailysummarySettleDO> list = settleservice.list(query);
		int total = settleservice.count(query);
		PageUtils pageUtils = new PageUtils(list, total);
		return pageUtils;
	}
	
	@ResponseBody
	@RequestMapping("api/check")
	@RequiresPermissions("operation:settle:check")
	public R apicheck(String id,int auditvalue,String remark){
		DailysummarySettleDO settledo = settleservice.get(id);
		if(settledo.getAuditStatus()==-1)
		{
			settleservice.updateAudit(id, auditvalue, this.getUserId().intValue(),remark);
			return R.ok();
		}
        return R.error();
	}
	
	private String ConvertToSettleMethodText(String value)
	{
		switch(value)
		{
		   case "1":
				return "充值金额";
		   case "2":
				return "消费金额";
		    default:break;
		}
		return "未知";
	}
	private String ConvertToAuditStatusText(int value)
	{
		switch(value)
		{
		   case -1:
				return "未审核";
		   case 0:
				return "审核不通过";
		   case 1:
				return "审核通过";
		    default:break;
		}
		return "未知";
	}
	private String ConvertToTransStatusText(int value)
	{
		switch(value)
		{
		   case 0:
				return "未转账";
		   case 1:
				return "已转账";
		    default:break;
		}
		return "未知";
	}
}
