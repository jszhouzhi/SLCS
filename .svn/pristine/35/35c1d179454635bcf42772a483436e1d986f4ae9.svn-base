package com.slzr.account.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageHelper;
import com.slzr.account.domain.AccountCancelDO;
import com.slzr.account.service.AccountCancelService;
import com.slzr.common.controller.BaseController;
import com.slzr.common.utils.ExcelExportTool;
import com.slzr.common.utils.PageUtils;
import com.slzr.common.utils.Query;
import com.slzr.common.utils.R;

/**
 * 账户注销管理
 * @author lc
 * @date 2018-03-08 16:45:51
 */
 
@Controller
@RequestMapping("/account/accountCancel")
public class AccountCancelController extends BaseController{
	@Autowired
	private AccountCancelService accountCancelService;
	
	@GetMapping()
	@RequiresPermissions("account:accountCancel:accountCancel")
	String AccountCancel(){
	    return "account/accountCancel/accountCancel";
	}
	
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("account:accountCancel:accountCancel")
	public PageUtils list(@RequestParam Map<String, Object> params){
		//查询列表数据
		Query query = new Query(params);
		PageHelper.startPage(Integer.parseInt(params.get("offset").toString()), 
				Integer.parseInt(params.get("limit").toString()));		
		List<AccountCancelDO> sysUserList = accountCancelService.list(query);
		int total = accountCancelService.count(query);
		PageUtils pageUtil = new PageUtils(sysUserList, total);
		return pageUtil;
	}
	

	@RequiresPermissions("account:accountCancel:deal")
	@GetMapping("/deal/{id}")	
	String deal(@PathVariable("id") Integer id,Model model){
		AccountCancelDO accountCancel = accountCancelService.get(id);
		model.addAttribute("accountCancel", accountCancel);
	    return "account/accountCancel/deal";
	}
	

	/**
	 * 修改审核
	 */
	@RequiresPermissions("account:accountCancel:deal")	
	@RequestMapping("/update")	
	@ResponseBody
	public R update( AccountCancelDO accountCancel){
		accountCancel.setDealtime(new Date());
		accountCancel.setDealuid(getUserId()); 

		int a = accountCancel.getAbalance().compareTo(accountCancel.getServicefee());
			/*	a = -1,表示bigdemical小于bigdemical2；
				a = 0,表示bigdemical等于bigdemical2；
				a = 1,表示bigdemical大于bigdemical2；*/
		if(a==-1){
			accountCancel.setDealresult(0);
			accountCancelService.update(accountCancel);
			return R.ok("提示：此账户余额不够，不可注销！");
		}else{
			accountCancelService.update(accountCancel);
			return R.ok("操作成功");
		}


	}
	

	

	
	/**
     * 导出
     * @param model
     * @param request
     * @param response
     */
    @RequestMapping("/expexcel")
    @RequiresPermissions("account:accountCancel:expexcel")
    public void expExceluser(ModelMap model,HttpServletRequest request,HttpServletResponse response){
    	   	
    	Map<String, Object> parameterMap = new HashMap<String, Object>();
    	parameterMap.put("searchName", request.getParameter("searchName"));
    	parameterMap.put("dealresult", request.getParameter("dealresult"));
    	parameterMap.put("refundresult", request.getParameter("refundresult"));
    	
  	  	String fileName = "账号注销.xls";
  	  	
  	  	String[] title = new String[]{"账号","类型","状态","手机号码","申请时间","账户余额","可退金额","服务费","退款时间","审核状态","审核时间"};
  	  	
  	    List<AccountCancelDO> list = null;
  	     	    
		try {
			list = accountCancelService.list(parameterMap);		    	 	    	  		    	  		
	    	List<Object[]> data = new ArrayList<Object[]>();
	    	for(int i=0; i<list.size();i++){
		        Object[] str = new Object[11];
		        if(null!=list.get(i).getAccountno() && !list.get(i).getAccountno().equals("")){
		        	str[0]=list.get(i).getAccountno().toString();
		        }else{
		        	str[0]="";
		        }
		        if(null!=list.get(i).getAccounttype()+""){
		        	str[1]=list.get(i).getAccounttype()+"";
		        }else{
		        	str[1]="";
		        }
		        if(null!=list.get(i).getState()+""){
		        	str[2]=list.get(i).getState()+"";
		        }else{
		        	str[2]="";
		        }
		        if(null!=list.get(i).getMobilephone() && !list.get(i).getMobilephone().equals("")){
		        	str[3]=list.get(i).getMobilephone().toString();
		        }else{
		        	str[3]="";
		        }
		        if(null!=list.get(i).getSubmittime() && !list.get(i).getSubmittime().equals("")){
		        	str[4]=list.get(i).getSubmittime().toString();
		        }else{
		        	str[4]="";
		        }
		        if(null!=list.get(i).getAbalance() && !list.get(i).getAbalance().equals("")){
		        	str[5]=list.get(i).getAbalance().toString();
		        }else{
		        	str[5]="";
		        }
		        if(null!=list.get(i).getCbalance() && !list.get(i).getCbalance().equals("")){
		        	str[6]=list.get(i).getCbalance().toString();
		        }else{
		        	str[6]="";
		        }
		        if(null!=list.get(i).getServicefee() && !list.get(i).getServicefee().equals("")){
		        	str[7]=list.get(i).getServicefee().toString();
		        }else{
		        	str[7]="";
		        }
		        if(null!=list.get(i).getRefundtime() && !list.get(i).getRefundtime().equals("")){
		        	str[8]=list.get(i).getRefundtime().toString();
		        }else{
		        	str[8]="";
		        }
		        if(null!=list.get(i).getDealresult() && !list.get(i).getDealresult().equals("")){
		        	str[9]=list.get(i).getDealresult().toString();
		        }else{
		        	str[9]="";
		        }
		        if(null!=list.get(i).getDealtime() && !list.get(i).getDealtime().equals("")){
		        	str[10]=list.get(i).getDealtime().toString();
		        }else{
		        	str[10]="";
		        }		        		        
		        data.add(str);
	    	}
	    	String sheetName = "expExcel";
			byte[] b = fileName.getBytes("UTF-8"); 
		    String formatFileName = new String(b,"ISO-8859-1");		      	 
		    response.setContentType("application/ms-excel");
		    response.setHeader("Content-disposition", "attachment;filename="+formatFileName);	
		    ExcelExportTool.exportExcel(formatFileName, sheetName, title, data, response);
		 } catch (Exception e) {
			 e.printStackTrace();
		 }finally{
			 list=null;
		 }   	
    }
}
